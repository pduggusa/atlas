generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(uuid())
    username      String         @unique
    profileImage  String
    password      String
    email         String         @unique
    role          String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    projects      Project[]
    meetings      Meeting[]
    tokens        UserToken[]
    teamMembers   TeamMember[]   @relation("UserTeamMember")
    ownedTeams    TeamMember[]   @relation("TeamOwner")
    subscriptions Subscription[]
    integrations  Integration[]
}

model Integration {
    id        String   @id @default(uuid())
    userId    String
    type      String
    status    String
    apiKey    String?
    settings  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model Project {
    id                 String          @id @default(uuid())
    clientId           String
    title              String
    description        String?
    numberOfCandidates Int
    qualifierQuestions String          @db.Text
    status             String
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    client             User            @relation(fields: [clientId], references: [id])
    candidates         Candidate[]
    emails             Email[]
    responses          Response[]
    feedback           ClientFeedback?
    meetings           Meeting[]
    payments           Payment[]
    apiLogs            APILog[]
    GPTAnalysis        GPTAnalysis[]
}

model Candidate {
    id           String        @id @default(uuid())
    name         String
    email        String
    phone        String?
    profileUrl   String?
    linkedinData Json?
    status       String
    projectId    String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    project      Project       @relation(fields: [projectId], references: [id])
    emails       Email[]
    responses    Response[]
    meetings     Meeting[]
    payments     Payment[]
    GPTAnalysis  GPTAnalysis[]
}

model Email {
    id              String        @id @default(uuid())
    candidateId     String
    projectId       String
    emailTemplateId String
    status          String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    candidate       Candidate     @relation(fields: [candidateId], references: [id])
    project         Project       @relation(fields: [projectId], references: [id])
    template        EmailTemplate @relation(fields: [emailTemplateId], references: [id])
}

model Response {
    id          String    @id @default(uuid())
    candidateId String
    projectId   String
    response    Json
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    candidate   Candidate @relation(fields: [candidateId], references: [id])
    project     Project   @relation(fields: [projectId], references: [id])
}

model ClientFeedback {
    id                 String   @id @default(uuid())
    projectId          String   @unique
    approvedCandidates Json
    comments           String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    project            Project  @relation(fields: [projectId], references: [id])
}

model Meeting {
    id           String    @id @default(uuid())
    candidateId  String
    clientId     String
    projectId    String
    meetingTime  DateTime
    recordingUrl String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    candidate    Candidate @relation(fields: [candidateId], references: [id])
    client       User      @relation(fields: [clientId], references: [id])
    project      Project   @relation(fields: [projectId], references: [id])
}

model Payment {
    id          String    @id @default(uuid())
    candidateId String
    projectId   String
    amount      Float
    status      String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    candidate   Candidate @relation(fields: [candidateId], references: [id])
    project     Project   @relation(fields: [projectId], references: [id])
}

model EmailTemplate {
    id        String   @id @default(uuid())
    name      String
    content   String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    emails    Email[]
}

model APILog {
    id        String   @id @default(uuid())
    apiName   String
    request   Json
    response  Json
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    project   Project? @relation(fields: [projectId], references: [id])
    projectId String?
}

model GPTAnalysis {
    id          String     @id @default(uuid())
    projectId   String
    candidateId String?
    analysis    Json
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    project     Project    @relation(fields: [projectId], references: [id])
    candidate   Candidate? @relation(fields: [candidateId], references: [id])
}

model UserToken {
    id        String   @id @default(uuid())
    userId    String
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model Plan {
    id            String         @id @default(uuid())
    name          String
    price         Float
    description   String?
    features      Json
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    subscriptions Subscription[]
}

model Subscription {
    id        String    @id @default(uuid())
    userId    String
    planId    String
    startDate DateTime
    endDate   DateTime?
    status    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id])
    plan      Plan      @relation(fields: [planId], references: [id])
}

model TeamMember {
    id        String   @id @default(uuid())
    userId    String
    teamId    String
    role      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation("UserTeamMember", fields: [userId], references: [id])
    team      User     @relation("TeamOwner", fields: [teamId], references: [id])
}
